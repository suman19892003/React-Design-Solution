//Filter Array
var itemColl=list.filter(value => value.form == "Legacy Systems");//It will return array
var itemIndex=list.filter(value => value.form == "Legacy Systems")[0];//Return Item Index

//Filter Array conditional load Component
let formToLoad =['Item1','Item2','Item3']
{formList.includes("Item1") && (<Item1Component/>)}
{formList.includes("Item2") && (<Item2Component/>)}

//Filter Unique value in array
this.setState({AllItemsToDisplayUnique: this.state.AllItemsToDisplay.filter((val,id,array) => array.indexOf(val) == id)},()=>{
   console.log(this.state.AllItemsToDisplayUnique)
})

//Filter Unique Values in Array 2nd approach(one dimension array)
var images = [{"id": 1,"tag": "people"}, {"id": 2,"tag": "places"}, {"id": 3,"tag": "places"}]
const uniqueTags = [];
  res.map(img => {
  if (uniqueTags.indexOf(img.tag) === -1) {
     uniqueTags.push(img.tag)
  }
  });
  
//Filter Unique Values in multidimensional Array approach(multi dimension array) or remove duplicates from array
var images = [{"id": 1,"tag": "people"}, {"id": 2,"tag": "places"}, {"id": 3,"tag": "places"}, {"id": 4,"tag": "places"}]
const uniqueTags = [];
  images.map(img => {
	  if (!isItemInArray(uniqueTags, img.tag)) {
	   uniqueTags.push(img)
	  }
  });
  
  isItemInArray=(array, item)=>{
    for (var i = 0; i < array.length; i++) {
        if (array[i].tag == item) {
            return true;   // Found it
        }
    }
    return false;   // Not found
}

//Filter Unique Value between two array
let allUser=this.state.allUserTypedColl;
let allListItem:any=this.state.allListItems;
var filteredArray=allUser.filter(item1 => allListItem.find(item2 => item1 === item2))

//Sort Array
const list = [
  { color: 'white', size: 'XXL' },
  { color: 'red', size: 'XL' },
  { color: 'black', size: 'M' }
]
list.sort((a, b) => (a.color > b.color) ? 1 : -1)

//Ternary Operators
{this.state.components== 'Item1' ? <Item1Component/> : <Item2Component/>}

//Push item in an array as string
let { AllItemsToDisplay } = this.state;
AllItemsToDisplay.push('Claims System');

//Push item in an array as object multidimensional
let { itemColl } = this.state;
itemColl.push({FileName:item.File.Name,FileURL:item.FileRef,ItemID:item.ID});

Or It can also be defined as below(It will push item to the existing array)
var array = [...this.state.itemColl];
file.map((item)=>{
array.push({FileName:item.File.Name,FileURL:item.FileRef,ItemID:item.ID});       
}) 
this.setState({ itemColl: array });


//Set State in Array
const uniqueTags = [];
uniqueTags.push(img.text)
this.setState({ProductCategoryColl:[...uniqueTags]})

//Copy item from one array to another array
var array = [...this.state.people];

//Remove Item from an array
var array = [...this.state.people]; // make a separate copy of the array
  var index = array.indexOf(e.target.value)
  if (index !== -1) {
    array.splice(index, 1);
    this.setState({people: array});
  }
  
//Remove array from multidimensional Array
cars = [{text:"test",
			data:[{text:"test1",
               data:[{text:"test1.1",data:[]}]
              },
              {text:"test2",
              data:[{text:"test2.1",data:[]}]
              }]
             }];
for(var i = 0; i <= cars.length - 1; i++){
   for(var k = 0; k <= cars[i].data.length - 1; k++){
    if(cars[i].data[k].text == "test1"){
        cars[i].data.splice(k--,1); // It will remove test1 array from cars array
    }
  }
}
  
//clear or Empty an array
var ar = [1, 2, 3, 4, 5, 6];
ar.length = 0; // Output []

//Remove a range of elements from an array.
var list = ["bar", "baz", "foo", "qux"];    
list.splice(0, 2); // Starting at index position 0, remove two elements ["bar", "baz"] and retains ["foo", "qux"].

//Check if item exists
if(this.state.AllClaimsSystemDefaultItem.indexOf(item) > -1){
let { AllItemsToDisplay } = this.state;
AllItemsToDisplay.push('Claims System ID Request');
}

//Iterate array map
{this.state.AllItemsToDisplayUnique.map((item,index)=>{
  return <li>{item}</li>
  })
}

//Pass parameter to other component in Route link
import { Route, Link, Switch, HashRouter } from 'react-router-dom';
<Route path="/NewPage" render={(props)=>{<NewPage2 details='detail for child comp' {...props}/>}}/>
<Link to='/NewPage'>Next</Link>

//Apply inline CSS to HTML React element
<button style={{color:'black',margin:'auto'}}>Submit</button>

//Confirmation alert box
window.confirm('Are you sure you wish to delete this item?') ? confirmMethod() : CancelMethod()

//Plain Page Redirect
window.location.href='https://myUrl.com'

//Local Storage get and set array value
var names = [];
names[0] = 'Suman';
localStorage.setItem("names", JSON.stringify(names));
var storedNames = JSON.parse(localStorage.getItem("names"));

//Dynamic link to or mailto
<a href={`mailto:${this.props.email}`}>email</a>
or
<a href={"mailto:" + this.props.email}>email</a>


//Repeat or foreach iteration in React JS
[...Array(5)].map((elementInArray, index) => ( //For iterating to 5 times
    <div key={index}>
      Text in Loop
    </div>
))

//Check null or empty in Javascript
You can just check if the variable has a value or not. Meaning,
if( myVariable ) {
//mayVariable is not :
//null
//undefined
//NaN
//empty string ("")
//0
//false
}
If you do not know whether a variable exists (that means, if it was declared) you should check with the typeof operator. e.g.
if( typeof myVariable !== 'undefined' ) {
    // myVariable will get resolved and it is defined
}

Difference between split and splice?
Slice() is used to extract elements from an array and return a new array, and it would not modify the origin array. 
Split() is used to convert the input string into an array by the separator, and since string is immutable, it would not modify the origin string.

Difference between split and splice and slice?
Split() method is used for strings array, slice() method is used for both arrays and strings. Splice() method is used for only arrays.

